/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  IsJSON,
  ValidateNested,
  IsEnum,
  IsString,
} from "class-validator";
import { GraphQLJSONObject } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { EventCreateNestedManyWithoutBillingsInput } from "./EventCreateNestedManyWithoutBillingsInput";
import { Type } from "class-transformer";
import { EnumBillingPayForm } from "./EnumBillingPayForm";
@InputType()
class BillingCreateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  amount?: number | null;

  @ApiProperty({
    required: false,
  })
  @IsJSON()
  @IsOptional()
  @Field(() => GraphQLJSONObject, {
    nullable: true,
  })
  clientData?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  discount?: number | null;

  @ApiProperty({
    required: false,
    type: () => EventCreateNestedManyWithoutBillingsInput,
  })
  @ValidateNested()
  @Type(() => EventCreateNestedManyWithoutBillingsInput)
  @IsOptional()
  @Field(() => EventCreateNestedManyWithoutBillingsInput, {
    nullable: true,
  })
  events?: EventCreateNestedManyWithoutBillingsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  iva?: number | null;

  @ApiProperty({
    required: false,
    enum: EnumBillingPayForm,
    isArray: true,
  })
  @IsEnum(EnumBillingPayForm, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumBillingPayForm], {
    nullable: true,
  })
  payForm?: Array<"Paypal" | "CreditCard" | "Devit" | "Cash" | "Transfer">;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  price?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  product?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  subtotal?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  totalValue?: number | null;
}
export { BillingCreateInput };
